/**
 * Created by a.amrastanov on 11.10.2014.
 */
var util = require('util');
var TableDB = require('./tableDB');

function UserDB(tableName, stateTableName){
    this.setTableName(tableName);
    this.stateTable = new TableDB(stateTableName);
}
util.inherits(UserDB, TableDB);

UserDB.prototype.getByToken =  function(token, cb){
    var separatorIndex = token.indexOf('_');
    if(separatorIndex < 1) {
        cb(require('errorCodes').incorrect_token);
    }
    else {
        var id = token.substring(0, separatorIndex);
        if (isNaN(id)) {
            cb(require('errorCodes').incorrect_token);
        }
        else {
           var realToken = token.substring(separatorIndex + 1);
            this.getById(id, function(err, result){
                if (err){
                    cb(err);
                }
                else{
                    if (result.token != realToken){
                        cb(require('errorCodes').incorrect_token);
                    }
                    else{
                        cb(null, result);
                    }
                }
            });
        }
    }
};

UserDB.prototype.updateState = function(user, newState, doAfter){
    var updateFields = {
        state: newState
    };
    this.stateTable.executeInsert({
        userId: user.data.id,
        state: newState,
        stateTime: new Date()
    });
    this.updateFieldById(user.data.id, updateFields, function(err){
        if (err){
            require('out').error('update state error', err, user, newState);
        }
        else{
            user.data.state = updateFields.state;
            if (doAfter){
                doAfter(user);
            }
        }
    });
};

var clientDB = new UserDB("client", "client_state");
var taksistDB = new UserDB("taksist", "taksist_state");

module.exports.clientDB = clientDB;
module.exports.taksistDB = taksistDB;
