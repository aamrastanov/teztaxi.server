/**
 * Created by Администратор on 05.07.2014.
 */
var util = require('util');
var issueHandler = require('issueHandler');
var orderHandler = require('orderHandler');

var WORK_STATE = {
    START: 0,
    ON_ISSUE: 1,
    TRIP_AGREEMENT: 2,
    BEFORE_TRIP: 3,
    TAKSIST_WAIT_CLIENT: 4,
    ON_TRIP: 5
};

function User(){}
User.prototype.init = function(data, dbHandler, sock, title){
    this.setUserData(data);
    this.dbHandler = dbHandler;
    this.sock = sock;
    this.reconnectCount = 0;
    this.title = title;
};
User.prototype.setUserData = function(data){
    this.data = data;
};
User.prototype.renewData = function(){
    var self = this;
    self.dbHandler.getById(self.data.id, function (err, userData) {
        if (err){
            require('out').error('get user by token error (, table = ' + self.dbHandler.getTableName() + 'token = ' + self.data.token + '), err = ' + err);
        }
        else{
            try {
                self.setUserData(userData);
            }
            catch (exp) {
                require('out').error("Set user data error", exp.stack, " userData: ", userData);
            }
        }
    });
};
User.prototype.send = function(message){
    var out = require('out');
    out.action("Sent to " + this.title + '(' + this.data.token + ')', out.getSockInfo(this.sock), message);
    this.sock.send(message);
};
User.prototype.setOrder = function(order){
    this.orderId = order.data.id;
    if(this.data.state == WORK_STATE.ON_ISSUE){
        this.dbHandler.updateState(this, WORK_STATE.TRIP_AGREEMENT);
    }
};
User.prototype.removeOrder = function(){
    delete this.orderId;
    if (this.haveIssue()){
        this.dbHandler.updateState(this, WORK_STATE.ON_ISSUE);
    }
    else{
        this.dbHandler.updateState(this, WORK_STATE.START);
    }
};
User.prototype.updateState = function(newState, afterDo){
    this.dbHandler.updateState(this, newState, afterDo);
};
User.prototype.getUserValue = function(){
    return {
        data : this.data,
        sock : {remoteAddress: this.sock.remoteAddress, remotePort: this.sock.remotePort, userId: this.sock.userId},
        reconnectCount : this.reconnectCount,
        title: this.title,
        orderId : this.orderId
    }
};


function Client(data, sock){
    this.init(data, require('db').clientDB, sock, 'Client');
    this.needTaksistsCoordinate = false;
}
util.inherits(Client, User);
Client.prototype.setIssue = function(issue){
    var issueId = issue.data.id;
    if (issueHandler.getIssueById(issueId)){
        this.issueId = issueId;
        this.updateState(WORK_STATE.ON_ISSUE);
    }
};
Client.prototype.getIssue = function(){
    if (this.haveIssue()){
        return issueHandler.getIssueById(this.issueId);
    }
};
Client.prototype.removeIssue = function(){
    delete this.issueId;
    if (this.data.state == WORK_STATE.ON_ISSUE){
        this.updateState(WORK_STATE.START);
    }
};
Client.prototype.
    haveIssue = function(){
    return this.issueId !== undefined;
};
Client.prototype.haveOrder = function(){
    return this.orderId !== undefined;
};
Client.prototype.getOrder = function(){
    if (this.orderId){
        return orderHandler.getOrderById(this.orderId);
    }
    else{
        var order = orderHandler.getOrderByClient(this);
        if (order){
            this.setOrder(order);
        }
        return order;
    }
};
Client.prototype.normalizeState = function(cb){
    if (this.haveIssue()){
        if (!this.getIssue()){
            this.removeIssue();
        }
    }
    if (this.data.state == WORK_STATE.ON_ISSUE){
        if(!this.haveIssue()){
            this.updateState(WORK_STATE.START, cb);
        }
        else{
            cb();
        }
    }
    else if (this.data.state == WORK_STATE.START){
        if(this.haveIssue()){
            this.updateState(WORK_STATE.ON_ISSUE, cb);
        }
        else{
            cb();
        }
    }
    else {
        if(!this.getOrder()){
            if(this.haveIssue()){
                this.updateState(WORK_STATE.ON_ISSUE, cb);
            }
            else{
                this.updateState(WORK_STATE.START, cb);
            }
        }
        else{
            cb();
        }
    }
};
Client.prototype.getJsonValue = function(){
    var userValue = this.getUserValue();
    userValue.needTaksistsCoordinate = this.needTaksistsCoordinate;
    userValue.issueId = this.issueId;
    return userValue;
};



function Taksist(data, sock){
    this.init(data, require('db').taksistDB, sock, 'Taxi');
    this.issueIds = [];
}
util.inherits(Taksist, User);
Taksist.prototype.setLang = function(lang){
    this.lang = lang;
};
Taksist.prototype.getLang = function(){
    return this.lang;
};
Taksist.prototype.addIssue = function(issue){
    var issueId = issue.data.id;
    if (issueHandler.getIssueById(issueId) !== undefined){
        this.issueIds.push(issueId);
    }
    if (this.issueIds.length == 1){
        this.updateState(WORK_STATE.ON_ISSUE);
    }
};
Taksist.prototype.removeIssue = function(issue){
    var issueId = issue.data.id;
    for (var index = 0; index < this.issueIds.length; index++){
        if (issueId == this.issueIds[index]){
            this.issueIds.splice(index, 1);
        }
    }
    if (this.issueIds.length == 0){
        this.updateState(WORK_STATE.START);
    }
};
Taksist.prototype.haveIssue = function(){
    return this.issueIds.length > 0;
};
Taksist.prototype.getAllCoordinateRequestedClients = function(){
    var clients = [];
    for (var index = 0; index < this.issueIds.length; index++){
        var issue = issueHandler.getIssueById(this.issueIds[index]);
        if (issue !== undefined){
            var client = issue.getClient();
            if (client.needTaksistsCoordinate){
                clients.push(client);
            }
        }
    }
    return clients;
};
Taksist.prototype.getAllIssues = function(){
    var issues = [];
    for (var index = 0; index < this.issueIds.length; index++){
        var issue = issueHandler.getIssueById(this.issueIds[index]);
        if (issue !== undefined){
            issues.push(issue);
        }
    }
    return issues;
};
Taksist.prototype.getOrder = function(){
    if (this.orderId){
        return orderHandler.getOrderById(this.orderId);
    }
    else{
        var order = orderHandler.getOrderByTaksist(this);
        if (order){
            this.setOrder(order);
        }
        return order;
    }
};
Taksist.prototype.setCoordinate = function(lat, lon){
    this.lat = lat;
    this.lon = lon;
};
Taksist.prototype.saveCoordinate = function(){
    var saveData = {
        taksistId: this.data.id,
        addTime: new Date(),
        lat: this.lat,
        lon: this.lon
    };
    require('db').taksistCoordinateDB.executeInsert(saveData);
};
Taksist.prototype.getCoordinateData = function(){
    return {
        taksistId: this.data.id,
        lat: this.lat,
        lon: this.lon
    }
};
Taksist.prototype.getToClientData = function(){
    return {
        id: this.data.id,
        firstName: this.data.firstName,
        lastName: this.data.lastName,
        phone: this.data.phone,
        age: taksistHandler.getAge(this.data.birthday),
        carNumber: this.data.carNumber,
        carModel: this.data.carModel,
        carMake: this.data.carMake,
        rating: this.data.rating,
        rideCount: this.data.rideCount,
        lat: this.lat,
        lon: this.lon
    }
};
Taksist.prototype.getSmsData = function(){
    return 'TezTaxi: Taksi geldi, ' + this.data.carColor + ', ' + this.data.carModel + ', ' + this.data.carNumber;
};
Taksist.prototype.getJsonValue = function(){
    var userValue = this.getUserValue();
    userValue.lat = this.lat;
    userValue.lon = this.lon;
    userValue.issueIds = this.issueIds;
    return userValue;
};


function UserHandler(){}
UserHandler.prototype.WORK_STATE = WORK_STATE;
UserHandler.prototype.getUserByToken = function(token){
    return this._usersByToken[token];
};
UserHandler.prototype.getUserById = function(id){
    return this._usersById[id];
};
UserHandler.prototype.addUser = function(data, sock){
    var user = new this.userConstructor(data, sock);
    sock.userId = data.id;
    this._usersById[data.id] = user;
    this._usersByToken[data.id + '_' + data.token] = user;
};
UserHandler.prototype.removeUser = function(user){
    if (this.deleteRelations !== undefined){
        this.deleteRelations(user);
    }
    delete this._usersByToken[user.data.id + '_' + user.data.token];
    delete this._usersById[user.data.id];
};
UserHandler.prototype.getAllUsers = function(){
    var users = [];
    for(var userId in this._usersById){
        users.push(this._usersById[userId]);
    }
    return users;
};
UserHandler.prototype.getAge = function(dateString){
    var today = new Date();
    var birthDate = new Date(dateString);
    var age = today.getFullYear() - birthDate.getFullYear();
    var m = today.getMonth() - birthDate.getMonth();
    if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())){
        age--;
    }
    return age;
};
UserHandler.prototype.sendToAllUsers = function(message){
    for (var userId in this._usersById) {
        var user = this._usersById[userId];
        user.send(message);
    }
};



function ClientHandler(){
    this._usersByToken = {};
    this._usersById = {};
    this._taksistsShowRequestedUsers = [];
    this.userConstructor = Client;
}
util.inherits(ClientHandler, UserHandler);

ClientHandler.prototype.deleteRelations = function(user){
   this.removeShowTaksistsRequestedUser(user);
};
ClientHandler.prototype.addShowTaksistsRequestedUser = function(user){
    this._taksistsShowRequestedUsers.push(user);
};
ClientHandler.prototype.removeShowTaksistsRequestedUser = function(user){
    for(var index = 0; index < this._taksistsShowRequestedUsers.length; index++){
        if (this._taksistsShowRequestedUsers[index] == user){
            this._taksistsShowRequestedUsers.splice(index, 1);
        }
    }
};
ClientHandler.prototype.getTaksistsShowRequestedUsers = function(){
    return this._taksistsShowRequestedUsers;
};
ClientHandler.prototype.isTaksistsShowRequestedUser = function(user){
    for (var index = 0; index < this._taksistsShowRequestedUsers.length; index++){
        var client = this._taksistsShowRequestedUsers[index];
        if (client === user){
            return true;
        }
    }
    return false;
};



function TaksistHandler(){
    this._usersByToken = {};
    this._usersById = {};
    this.userConstructor = Taksist;
}
util.inherits(TaksistHandler, UserHandler);


var clientHandler = new ClientHandler();
var taksistHandler = new TaksistHandler();

module.exports.clientHandler = clientHandler;
module.exports.taksistHandler = taksistHandler;

module.exports.WORK_STATE = WORK_STATE;