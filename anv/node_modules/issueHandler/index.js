/**
 * Created by a.amrastanov on 08.09.2014.
 */
function getClientHandler(){
    return require('userHandler').clientHandler;
}
function getTaksistHandler(){
    return require('userHandler').taksistHandler;
}

function createTaksistAnswer(taksist, cost){
    return {taksist: taksist, cost: cost};
}

function Issue(data) {
    this.data = data;
    this.taksistCosts = {}; //key is a ID of taksist, value is cost
}
Issue.prototype.setPoi = function(poi){
    this.poi = poi;
};
Issue.prototype.getPoi = function(){
    return this.poi;
};
Issue.prototype.getClient = function(){
    return getClientHandler().getUserById(this.data.clientId);
};
Issue.prototype.removeClient = function(){
    var client = this.getClient();
    if (client){
        client.removeIssue();
    }
};
Issue.prototype.addTaksistCost = function(taksist, cost){
    this.taksistCosts[taksist.data.id] = cost;
    taksist.addIssue(this);
    return createTaksistAnswer(taksist, cost);
};
Issue.prototype.getTaksistsWithCost = function(){
    var taksistWithCosts = [];
    var keys = Object.keys(this.taksistCosts);
    var taksistHandler = getTaksistHandler();
    for(var index = 0; index < keys.length; index++){
        var key = keys[index];
        var taksist = taksistHandler.getUserById(key);
        if (taksist){
            taksistWithCosts.push(createTaksistAnswer(taksist, this.taksistCosts[key]));
        }
    }
    return taksistWithCosts;
};
Issue.prototype.getTaksists = function(){
    var taksists = [];
    var keys = Object.keys(this.taksistCosts);
    var taksistHandler = getTaksistHandler();
    for(var index = 0; index < keys.length; index++){
        var key = keys[index];
        var taksist = taksistHandler.getUserById(key);
        if (taksist){
            taksists.push(taksist);
        }
    }
    return taksists;
};
Issue.prototype.removeTaksist = function(taksist){
    delete this.taksistCosts[taksist.data.id];
    taksist.removeIssue(this);
};
Issue.prototype.removeAllTaksist = function(){
    var keys = Object.keys(this.taksistCosts);
    var taksistHandler = getTaksistHandler();
    for(var index = 0; index < keys.length; index++){
        var key = keys[index];
        var taksist = taksistHandler.getUserById(key);
        if (taksist){
            this.removeTaksist(taksist);
        }
    }
};
Issue.prototype.removeUsers = function(){
    this.removeClient();
    this.removeAllTaksist();
};




function IssueHandler(){
    this.issuesById = {};
    this.getIssueById = function(issueId){
        return this.issuesById[issueId];
    };
    this.generateIssue = function(clientId, region, addressFrom, addressTo, clientLat, clientLon, orientation, offeredPrice){
        var issueData = {
            clientId: clientId,
            regionRelId: region,
            addressFrom: addressFrom,
            addressTo: addressTo,
            clientLat: clientLat,
            clientLon: clientLon,
            createDate: new Date(),
            offeredPrice: offeredPrice
        };
        var poi;
        if (orientation){
            poi = orientation.poi;
            issueData.poiDistance = orientation.distance;
            issueData.poiRelId = poi.relationId;
        }
        require('db').issueDB.executeInsert(issueData, function(err, result){
            if (err){
                require('out').error('Issue insert error', err, issueData);
            }
            else{
                issueData.id = result.insertId;
                var issue = issueHandler.addIssue(issueData);
                issue.setPoi(poi);
                var actionHandler = require('actionHandler');
                actionHandler.serverActionHandler.doAction({
                    action:actionHandler.serverActionsValues.sendNewIssuesAndStateToTaksists,
                    issues: [issue],
                    taksists: require('userHandler').taksistHandler.getAllUsers()
                });
                var client = require('userHandler').clientHandler.getUserById(issue.data.clientId);
                if (client){
                    client.setIssue(issue);
                }
            }
        });
    };
    this.addIssue = function(issueData){
        var issue = new Issue(issueData);
        this.issuesById[issueData.id] = issue;
        return issue;
    };
    this.getAllIssues = function(){
        var issues = [];
        for (var issueId in issueHandler.issuesById){
            var issue = issueHandler.getIssueById(issueId);
            issues.push(issue);
        }
        return issues;
    };
    this.removeIssue = function(issue){
        delete this.issuesById[issue.data.id];
    };
}
var issueHandler = new IssueHandler();
module.exports = issueHandler;

