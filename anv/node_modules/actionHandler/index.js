/**
 * Created by Администратор on 29.06.2014.
 */

var util = require('util');

var clientActions = {
    1001: require('./clientActions/createIssue'),
    1002: require('./clientActions/cancelGetTaksistsRequest'),
    1003: require('./clientActions/taksistsCoordinateGettingStart'),
    1004: require('./clientActions/taksistsCoordinateGettingStop'),
    1006: require('./clientActions/createOrder'),
    1007: require('./clientActions/goToTaksist'),
    1009: require('./clientActions/restoreState'),
    1010: require('./clientActions/taksistsShowingStart'),
    1011: require('./clientActions/taksistsShowingEnd'),
    1012: require('./clientActions/refuseOrder'),
    1013: require('./clientActions/clientTripEnd'),
    1014: require('./clientActions/resetState'),
    1020: require('./clientActions/renewUserData')
};
var clientActionsValues = {
    createIssue: 1001,
    cancelGetTaksistsRequest: 1002,
    taksistsCoordinateGettingStart: 1003,
    taksistsCoordinateGettingStop: 1004,
    createOrder: 1006,
    goToTaksist: 1007,
    restoreState: 1009,
    taksistsShowingStart: 1010,
    taksistsShowingEnd: 1011,
    refuseOrder: 1012,
    clientTripEnd: 1013,
    resetState: 1014,
    renewUserData: 1020
};


var taksistActions = {
    2007: require('./taksistActions/setTaksistCoordinate'),
    2008: require('./taksistActions/issueAccept'),
    2009: require('./taksistActions/issueAcceptCancel'),
    2010: require('./taksistActions/startWork'),
    2011: require('./taksistActions/orderAccept'),
    2012: require('./taksistActions/orderRefuse'),
    2013: require('./taksistActions/arriveToClient'),
    2014: require('./taksistActions/tripStart'),
    2015: require('./taksistActions/informTripDetails'),
    2016: require('./taksistActions/tripEnd'),
    2017: require('./taksistActions/clientDontCome'),
    2018: require('./taksistActions/cacheActions')
};
var taksistActionsValues = {
    setTaksistCoordinate: 2007,
    issueAccept: 2008,
    issueAcceptCancel: 2009,
    startWork: 2010,
    orderAccept: 2011,
    orderRefuse: 2012,
    arriveToClient: 2013,
    tripStart: 2014,
    informTripDetails: 2015,
    tripEnd: 2016,
    clientDontCome: 2017,
    cacheActions: 2018
};


var serverActions = {
    1500: require('./serverActions/sendTaksistsDataToClient'),
    1501: require('./serverActions/sendTaksistRemoveToClient'),
    1502: require('./serverActions/sendTaksistCoordinateToClient'),
    1503: require('./serverActions/sendOrderAcceptToClient'),
    1504: require('./serverActions/sendOrderRefuseToClient'),
    1505: require('./serverActions/sendTaksistArriveToClient'),
    1506: require('./serverActions/sendTripDetailsToClient'),
    1507: require('./serverActions/sendTripEndDetailsToClient'),
    1508: require('./serverActions/sendStateToClient'),
    1509: require('./serverActions/sendClientDontToClient'),
    1510: require('./serverActions/sendTaksistsDataWithCostToClient'),
    1511: require('./serverActions/sendOrderedTaksistOfflineToClient'),
    2500: require('./serverActions/sendNewIssuesAndStateToTaksists'),
    2501: require('./serverActions/sendIssueRemoveToTaksists'),
    2502: require('./serverActions/sendOrderToTaksist'),
    2503: require('./serverActions/sendClientComingToTaksist'),
    2504: require('./serverActions/sendOrderRemoveToTaksist'),
    2505: require('./serverActions/sendClientOfflineToTaksist')
};
var serverActionsValues = {
    sendTaksistsDataToClient: 1500,
    sendTaksistRemoveToClient: 1501,
    sendTaksistCoordinateToClient: 1502,
    sendOrderAcceptToClient: 1503,
    sendOrderRefuseToClient: 1504,
    sendTaksistArriveToClient: 1505,
    sendTripDetailsToClient: 1506,
    sendTripEndDetailsToClient: 1507,
    sendStateToClient: 1508,
    sendClientDontToClient: 1509,
    sendTaksistsDataWithCostToClient: 1510,
    sendOrderedTaksistOfflineToClient: 1511,
    sendNewIssuesAndStateToTaksists: 2500,
    sendIssueRemoveToTaksists: 2501,
    sendOrderToTaksist: 2502,
    sendClientComingToTaksist: 2503,
    sendOrderRemoveToTaksist: 2504,
    sendClientOfflineToTaksist: 2505
};



var serverActionConstants = {
    NOT_AVAILABLE: 0,
    REFUSE: 1
};


var out = require('out');
function ActionHandler(){}
ActionHandler.prototype.doAction = function(parameterMap){
    out.action({action: parameterMap.action, token: parameterMap.token});
    var actionConstructor = this.actionList[parameterMap.action];
    if (actionConstructor === undefined){
        return require('contextHandler').NewErrorMessage(parameterMap.action, require('errorCodes').no_action_in_server);
    }
    else{
        try{
            var actionHandler = new actionConstructor(parameterMap);
            return actionHandler.doAction();
        }
        catch (exp){
            out.error("do action error", exp.message + ' (' + exp.errno + ')', exp.stack);
            var res = require('contextHandler').NewErrorMessage(parameterMap.action, require('errorCodes').inner_server_error);
            out.action("return error", res);
            return res;
        }
    }
};

function ClientActionHandler(){
    this.actionList = clientActions;
}
util.inherits(ClientActionHandler, ActionHandler);

function TaksistActionHandler(){
    this.actionList = taksistActions;
}
util.inherits(TaksistActionHandler, ActionHandler);

function ServerActionHandler(){
    this.actionList = serverActions;
}
util.inherits(ServerActionHandler, ActionHandler);

module.exports.clientActionHandler = new ClientActionHandler();
module.exports.taksistActionHandler = new TaksistActionHandler();
module.exports.serverActionHandler = new ServerActionHandler();

module.exports.clientActionsValues = clientActionsValues;
module.exports.taksistActionsValues = taksistActionsValues;
module.exports.serverActionsValues = serverActionsValues;

module.exports.serverActionConstants = serverActionConstants;
